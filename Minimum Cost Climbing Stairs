Ques - https://leetcode.com/problems/min-cost-climbing-stairs/


Without DP
class Solution {
    public int minCostClimbingStairs(int[] cost) {
    
        for (int i = 2; i < cost.length; i++) {
            cost[i] += Math.min(cost[i - 1], cost[i-2]);
        }
        return Math.min(cost[cost.length - 1], cost[cost.length -2]);
    }
    
}


With DP
class Solution {
    
    int[] dp;
    
    public int minCostClimbingStairs(int[] cost) {
        dp = new int[cost.length];
        Arrays.fill(dp,-1);
        return Math.min(minimumCost(cost,0,0), minimumCost(cost,1,0));
    }
    
    int minimumCost(int[] cost, int i, int sum){
        if(i >= cost.length)
            return sum;
        if(dp[i] != -1)
            return dp[i];
        dp[i] = cost[i]+Math.min(minimumCost(cost,i+1,sum), minimumCost(cost, i+2, sum));
        return dp[i];
    }
    
}
