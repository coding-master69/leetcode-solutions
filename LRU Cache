Ques - 


Using Queue - TLE

class LRUCache {
    
    Queue<Integer> lruKey;
    HashMap<Integer, Integer> keyValue;
    int len;
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        lruKey = new LinkedList<>();
        keyValue = new HashMap();
        len = 0;      
    }
    
    public int get(int key) {
        int ans = keyValue.getOrDefault(key,-1);
        if(ans != -1){
            lruKey.remove(Integer.valueOf(key));
            lruKey.add(key);
        }
        //System.out.println(lruKey);
        return ans;
    }
    
    public void put(int key, int value) {
        if(keyValue.containsKey(key)){
            keyValue.put(key,value);
            lruKey.remove(Integer.valueOf(key));
            lruKey.offer(key);            
        }else{
            if(len == capacity){
                int lru = lruKey.poll();
                keyValue.remove(lru);
                len--;
            }
            keyValue.put(key,value);
            lruKey.offer(key);
            len++;
        }
        //System.out.println(keyValue + "  " + lruKey);
    }
}


Using HashMap and Doubly LinkedList

class Node{
    Node prev;
    Node next;
    int key;
    int value;
    public Node(int key,int value){
        this.key=key;
        this.value=value;
    }
}

class LRUCache {

    HashMap<Integer,Node> map=new HashMap<>();
    Node head=new Node(0,0);
    Node tail=new Node(0,0);
    int capacity;
    
    public LRUCache(int capacity) {
        this.capacity=capacity;
        head.next=tail;
        tail.prev=head;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node=map.get(key);
            delete(node);
            insert(node);
            return node.value;
        }
        else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            delete(map.get(key));
        }
        if(map.size()>=capacity){
            delete(tail.prev);
        }
        insert(new Node(key,value));
    }
    public void insert(Node node){
        map.put(node.key,node);
        Node headNext=head.next;
        head.next=node;
        node.prev=head;
        headNext.prev=node;
        node.next=headNext;
    }
    public void delete(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
}
