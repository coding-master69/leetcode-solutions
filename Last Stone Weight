Ques - https://leetcode.com/problems/last-stone-weight/


class Solution {
    public int lastStoneWeight(int[] stones) {
        if(stones.length == 1)
            return stones[0];
        Arrays.sort(stones);
        int len = stones.length-1;
        int m = stones[len];
        int n = stones[len-1];
        if(m == 0 || n == 0)
            return m;
        stones[len] = 0;
        stones[len-1] = Math.abs(m-n);
        return lastStoneWeight(stones);
        
    }
}


class Solution {
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());
        for(int i = 0; i < stones.length; i++)
            queue.offer(stones[i]);
        
        while(queue.size() > 1){
            int x = queue.poll();
            int y = queue.poll();
            if(x == y)
                continue;
            queue.offer(Math.abs(x-y));
        }
        if(queue.size() == 1)
            return queue.poll();
        return 0;
        
    }
}
