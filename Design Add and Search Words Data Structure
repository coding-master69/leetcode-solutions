Ques - https://leetcode.com/problems/design-add-and-search-words-data-structure/


class WordDictionary {
    
    private TrieNode root;

    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(!node.containsKey(ch))
                node.set(ch);
            node = node.get(ch);
        }
        node.setEnd();
    }
    
    public boolean search(String word) {
        return searchDot(word,root);
    }
    
    private boolean searchDot(String word, TrieNode root){
        
        TrieNode node = root;
        if(word.isEmpty())
            return node.isEnd();
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(ch != '.'){
                if(node.containsKey(ch))
                    node=node.get(ch);
                else 
                    return false;
            }
            else{
                char j;
                for(j = 'a'; j <= 'z'; j++){
                    if(node.containsKey(j))
                        if(searchDot(word.substring(i+1), node.get(j)))
                            return true;
                }
                if(j == (char)('z'+1))
                    return false;
            }
        }
        //System.out.println();
        return node.isEnd();
    }
    
    
}
class TrieNode{
    TrieNode[] alpha;
    boolean flag;
    TrieNode(){
        alpha = new TrieNode[26];
        flag = false;
    }
    
    boolean containsKey(char alphabet){
        return alpha[alphabet-'a'] != null;
    }
    
    TrieNode get(char alphabet){
        return alpha[alphabet-'a'];
    }
    
    void set(char alphabet){
        alpha[alphabet-'a'] = new TrieNode();
    }
    
    void setEnd(){
        flag = true;
    }
    boolean isEnd(){
        return flag;
    }
    
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
